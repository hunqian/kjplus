<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	   xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
	   xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:jms="http://www.springframework.org/schema/jms"
	   xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-2.5.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">
	<!-- 配置组件扫描 -->
	<context:annotation-config />
	<context:component-scan base-package="com.*.dao" />
	<context:component-scan base-package="com.*.service" />
	<context:component-scan base-package="com.*.service.impl" />
	<context:component-scan base-package="com.*.rest" />
	<context:component-scan base-package="com.kjplus.push" />
    <context:component-scan base-package="com.*.cache" />
	<!-- 配置MVC注解扫描 -->
	<mvc:annotation-driven />
	<util:properties id="jdbc" location="classpath:jdbc.properties" />
	<!-- 配置DataSource数据库连接 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="#{jdbc.databaseDriver}" />
		<property name="url" value="#{jdbc.url}" />
		<property name="username" value="#{jdbc.username}" />
		<property name="password" value="#{jdbc.password}" />
		<!-- 配置连接池的初始值 -->
		<property name="initialSize" value="1" />
		<!-- 连接池的最大值 -->
		<!-- <property name="maxActive" value="500"/> -->
		<!-- 最大空闲时，当经过一个高峰之后，连接池可以将一些用不到的连接释放，一直减少到maxIdle为止 -->
		<!-- <property name="maxIdle" value="2"/> -->
		<!-- 当最小空闲时，当连接少于minIdle时会自动去申请一些连接 -->
		<property name="minIdle" value="1" />
		<property name="maxActive" value="100" />
		<property name="maxIdle" value="20" />
		<property name="maxWait" value="1000" />
		<property name="testWhileIdle" value="true" />
		<property name="timeBetweenEvictionRunsMillis" value="10000" />
		<property name="validationQuery" value="select 1" />
	</bean>
	<!-- 配置SqlSessionFactoryBean 配置session工厂 -->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定连接资源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 指定映射文件 -->
		<property name="mapperLocations" value="classpath:mappers/*.xml" />
	</bean>
	<!-- 配置MapperScannerConfigurer -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.*.dao" />
		<property name="sqlSessionFactoryBeanName" value="sessionFactory"></property>
	</bean>
	<!-- 配置事务管理 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!--8) 添加规则事务 -->
	<aop:config>
		<aop:pointcut id="myMethod" expression="execution(* com.*.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="myMethod" />
		<aop:aspect ref="reqLogAspect">
			<!--前置通知 -->
			<aop:before method="before" pointcut-ref="myMethod" />
			<!--异常通知 -->
			<aop:after-throwing method="afterThrowing"
				throwing="ex" pointcut-ref="myMethod" />
			<!--后置通知 -->
			<aop:after method="after" pointcut-ref="myMethod" />
		</aop:aspect>
	</aop:config>
	<!-- 配置切面的类 -->
	<bean id="reqLogAspect" class="com.kjplus.aop.ReqLogAspect" />
    <tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="init*" propagation="REQUIRED" />
			<tx:method name="*" propagation="REQUIRED" read-only="false" />
		</tx:attributes>
	</tx:advice>
	<!-- 开启事务的注解解析 -->
	<tx:annotation-driven />
	<!-- 配置拦截器 -->
	<!-- 对所有请求都拦截，公共拦截器可以有多个 --> 
 	<mvc:interceptors>
		 <bean name="appInterceptor" class="com.kjplus.interceptor.AppInterceptor" />
	</mvc:interceptors>
	<!--
	{ 如果此时线程池中的数量小于corePoolSize，即使线程池中的线程都处于空闲状态，也要创建新的线程来处理被添加的任务。}
	{如果此时线程池中的数量等于 corePoolSize，但是缓冲队列 workQueue未满，那么任务被放入缓冲队列。}
	{如果此时线程池中的数量大于corePoolSize，缓冲队列workQueue满，并且线程池中的数量小于maxPoolSize，建新的线程来处理被添加的任务。}
	{如果此时线程池中的数量大于corePoolSize，缓冲队列workQueue满，并且线程池中的数量等于maxPoolSize，那么通过handler所指定的策略来处理此任务。
	也就是：处理任务的优先级为：核心线程corePoolSize、任务队列workQueue、最大线程 maximumPoolSize，如果三者都满了，使用handler处理被拒绝的任务。}
	{如果当线程池中的线程数量大于corePoolSize时，如果某线程空闲时间超过keepAliveTime，线程将被终止。这样，线程池可以动态的调整池中的线程数。} -->
	 <!-- spring thread pool executor 利用spring本身自带的线程池 -->           
     <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
          <!-- 线程池维护线程的最少数量 -->
          <property name="corePoolSize" value="5" />
          <!-- 允许的空闲时间 -->
          <property name="keepAliveSeconds" value="200" />
          <!-- 线程池维护线程的最大数量 -->
         <property name="maxPoolSize" value="10" />
         <!-- 缓存队列 -->
         <property name="queueCapacity" value="20" />
         <!-- 对拒绝task的处理策略 -->
         <property name="rejectedExecutionHandler">
             <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
         </property>
     </bean>

</beans>