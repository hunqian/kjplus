<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:jms="http://www.springframework.org/schema/jms"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-2.5.xsd">
	<!-- 配置组件扫描 -->
	<context:annotation-config />
	<context:component-scan base-package="com.*.dao" />
	<context:component-scan base-package="com.*.service" />
	<context:component-scan base-package="com.*.service.impl" />
	<context:component-scan base-package="com.*.rest" />
	<!-- 配置MVC注解扫描 -->
	<mvc:annotation-driven />
	<util:properties id="jdbc" location="classpath:jdbc.properties" />
	<!-- 配置DataSource数据库连接 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="#{jdbc.databaseDriver}" />
		<property name="url" value="#{jdbc.url}" />
		<property name="username" value="#{jdbc.username}" />
		<property name="password" value="#{jdbc.password}" />
		<!-- 配置连接池的初始值 -->
		<property name="initialSize" value="1" />
		<!-- 连接池的最大值 -->
		<!-- <property name="maxActive" value="500"/> -->
		<!-- 最大空闲时，当经过一个高峰之后，连接池可以将一些用不到的连接释放，一直减少到maxIdle为止 -->
		<!-- <property name="maxIdle" value="2"/> -->
		<!-- 当最小空闲时，当连接少于minIdle时会自动去申请一些连接 -->
		<property name="minIdle" value="1" />
		<property name="maxActive" value="100" />
		<property name="maxIdle" value="20" />
		<property name="maxWait" value="1000" />
		<property name="testWhileIdle" value="true" />
		<property name="timeBetweenEvictionRunsMillis" value="10000" />
		<property name="validationQuery" value="select 1" />
	</bean>
	<!-- 配置SqlSessionFactoryBean 配置session工厂 -->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定连接资源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 指定映射文件 -->
		<property name="mapperLocations" value="classpath:mappers/*.xml" />
	</bean>
	<!-- 配置MapperScannerConfigurer -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.*.dao" />
		<property name="sqlSessionFactoryBeanName" value="sessionFactory"></property>
	</bean>
	<!-- 配置事务管理 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!--8) 添加规则事务 -->
	<aop:config>
		<aop:pointcut id="myMethod" expression="execution(* com.*.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="myMethod" />
		<aop:aspect ref="reqLogAspect">
			<!--前置通知 -->
			<aop:before method="before" pointcut-ref="myMethod" />
			<!--异常通知 -->
			<aop:after-throwing method="afterThrowing"
				throwing="ex" pointcut-ref="myMethod" />
			<!--后置通知 -->
			<aop:after method="after" pointcut-ref="myMethod" />
		</aop:aspect>
	</aop:config>
	<!-- 配置切面的类 -->
	<bean id="reqLogAspect" class="com.kjplus.aop.ReqLogAspect" />
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="init*" propagation="REQUIRED" />
			<tx:method name="*" propagation="REQUIRED" read-only="false" />
		</tx:attributes>
	</tx:advice>
	<!-- 开启事务的注解解析 -->
	<tx:annotation-driven />
	<!-- 读取消息服务器的jdbc配置 此命名空间 是将jdbc配置变为常量-->
	<context:property-placeholder location="classpath:jdbc.properties"/>
</beans>